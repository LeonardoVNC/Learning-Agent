generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===========================
   Auth and User
   =========================== */

model User {
  id        String   @id @default(uuid())
  name      String
  lastname  String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)

  // relation 1:N
  roles     UserRole[]
  sessions  UserSession[]

  //Profiles 1:1
  teacherProfile TeacherProfile?   @relation("UserTeacherProfile")
  studentProfile  StudentProfile?  @relation("UserStudentProfile")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ===========================
   Role and permission (RBAC)
   =========================== */

model Role {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Permission {
  id          String          @id @default(uuid())
  action      String
  resource    String
  description String?
  roles       RolePermission[]

  // Key unique
  @@unique([action, resource], map: "action_resource")
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
}

/* ===========================
   Profile 1:1
   =========================== */

model TeacherProfile {
  userId       String   @id
  user         User     @relation("UserTeacherProfile", fields: [userId], references: [id], onDelete: Cascade)
  title        String?  // Ing., Mgr., PhD, etc.
  bio          String?
  academicUnit String?  // departamento/escuela

  // relation 1:N
  classes      Classes[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StudentProfile {
  userId        String   @id
  user          User     @relation("UserStudentProfile", fields: [userId], references: [id], onDelete: Cascade)
  code          Int      @unique
  career        String?  // Sistemas, Arquitectura....
  admissionYear Int?

  // relation 1:N
  enrollment    Enrollment[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

/* ===========================
   Sessions (login)
   =========================== */

model UserSession {
  id            String   @id @default(uuid())
  userId        String
  token         String
  refresh_token String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  ipAddress     String?
  userAgent     String?

  @@index([userId, expiresAt])
}

/* ===========================
   Academic Management (classes and enrollment)
   =========================== */

model Classes {
  id            String            @id @default(uuid())
  name          String
  semester      String
  isActive      Boolean           @default(true)
  dateBegin     DateTime
  dateEnd       DateTime

  // relation 1:N
  enrollment    Enrollment[]

  teacherId     String
  teacher       TeacherProfile    @relation(fields: [teacherId], references: [userId])
}

// relation N:N - StudentProfile-Classes
model Enrollment {
  studentId     String
  student       StudentProfile    @relation(fields: [studentId], references: [userId])
  classId       String
  class         Classes           @relation(fields: [classId], references: [id])
  isActive      Boolean           @default(true)

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@id([studentId, classId])
}